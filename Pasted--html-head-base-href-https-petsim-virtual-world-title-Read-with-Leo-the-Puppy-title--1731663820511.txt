<html><head><base href="https://petsim.virtual.world/">
<title>Read with Leo the Puppy! üêïüìö</title>
<style>
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap');

body {
  margin: 0;
  padding: 5px;
  min-height: 100vh;
  background: linear-gradient(135deg, #1a1d24 0%, #2c3037 100%);
  font-family: 'Poppins', sans-serif;
  display: flex;
  flex-direction: column;
  align-items: center;
  color: #ffffff;
  gap: 5px; 
  overflow-x: hidden;
}

h1 {
  font-size: 1.8rem; 
  font-weight: 600;
  text-align: center;
  margin: 0.5rem 0; 
  background: linear-gradient(45deg, #ffd700, #ffa726);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  filter: drop-shadow(0 2px 4px rgba(255, 215, 0, 0.2));
}

.puppy-container {
  position: relative;
  width: 300px; 
  height: 300px; 
  margin: 0; 
  display: flex;
  justify-content: center;
  align-items: center;
  perspective: 1000px;
  min-height: 300px;
  max-height: 300px; 
  z-index: 2;
}

.puppy-image {
  width: 250px; 
  height: auto;
  filter: drop-shadow(0 8px 16px rgba(0,0,0,0.3));
  transition: opacity 0.3s ease-in-out;
  z-index: 2;
}

.happiness-meter {
  width: 300px;
  height: 8px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 4px;
  overflow: hidden;
  margin: 5px 0; 
  box-shadow: inset 0 2px 4px rgba(0,0,0,0.2);
}

.happiness-fill {
  height: 100%;
  width: 50%;
  background: linear-gradient(90deg, #ffd700, #ffa726);
  transition: width 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  box-shadow: 0 0 10px rgba(255, 215, 0, 0.5);
}

.interaction-items {
  display: none; 
  gap: 12px; 
  margin: 5px 0; 
}

.interaction-item {
  cursor: pointer;
  padding: 8px 15px; 
  background: rgba(255, 255, 255, 0.1);
  border-radius: 12px;
  box-shadow: 0 4px 15px rgba(0,0,0,0.2);
  transition: all 0.3s ease;
  border: 1px solid rgba(255, 255, 255, 0.1);
  display: flex;
  align-items: center;
  gap: 8px;
  font-weight: 500;
  font-size: 0.85rem; 
}

.interaction-item:hover {
  transform: translateY(-2px);
  background: rgba(255, 255, 255, 0.15);
  border-color: rgba(255, 215, 0, 0.3);
  box-shadow: 0 6px 20px rgba(0,0,0,0.3);
}

.interaction-item:active {
  transform: translateY(1px);
}

.particle {
  position: absolute;
  pointer-events: none;
  animation: float 1.5s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  font-size: 1.5rem;
  z-index: 100;
}

@keyframes float {
  0% { 
    transform: translateY(0) scale(1) rotate(0deg); 
    opacity: 1; 
  }
  100% { 
    transform: translateY(-100px) scale(0) rotate(360deg); 
    opacity: 0; 
  }
}

.bounce {
  animation: bounce 0.5s cubic-bezier(0.36, 0, 0.66, 1.54) alternate infinite;
}

@keyframes bounce {
  0% { transform: translateY(0) scale(1); }
  100% { transform: translateY(-20px) scale(1.05); }
}

.stats {
  display: flex;
  gap: 20px; 
  margin: 2px 0; 
  font-size: 0.9rem;
  color: rgba(255, 255, 255, 0.8);
  background: rgba(255, 255, 255, 0.05);
  padding: 5px 12px;
  border-radius: 8px;
}

.stat {
  display: flex;
  align-items: center;
  gap: 6px; 
}

.stat-icon {
  font-size: 1.1rem; 
}

.stats-container {
  display: flex;
  flex-direction: column;
  gap: 5px;
  align-items: center;
}

.reading-container {
  background: rgba(255, 255, 255, 0.1);
  border-radius: 15px;
  padding: 15px;
  margin: 5px 0;
  width: 80%;
  max-width: 500px;
  text-align: center;
  position: relative; 
  z-index: 0; 
}

.word-display {
  font-size: 1.6rem;
  font-weight: 600;
  color: #ffd700;
  text-shadow: 0 2px 4px rgba(0,0,0,0.3);
  margin: 10px 0;
  min-height: 45px;
  display: flex;
  align-items: center;
  justify-content: center;
  letter-spacing: 4px;
}

.reading-input {
  background: rgba(255, 255, 255, 0.15);
  border: 2px solid rgba(255, 215, 0, 0.3);
  border-radius: 8px;
  padding: 8px 12px;
  font-size: 1rem;
  color: white;
  width: 80%;
  margin: 8px 0;
  outline: none;
  transition: all 0.3s ease;
}

.reading-input:focus {
  border-color: #ffd700;
  box-shadow: 0 0 15px rgba(255, 215, 0, 0.2);
  transform: scale(1.02);
}

.next-word-btn {
  background: linear-gradient(45deg, #ffd700, #ffa726);
  border: none;
  border-radius: 8px;
  padding: 10px 20px;
  color: #1a1d24;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 8px 0;
}

.next-word-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);
}

.next-word-btn:active {
  transform: scale(0.95);
}

.reward-container {
  display: none;
  margin: 10px 0;
  animation: fadeIn 0.5s ease;
  text-align: center;
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

.button-group {
  display: flex;
  gap: 10px;
  margin: 5px 0;
}

.mic-button {
  background: linear-gradient(45deg, #ffd700, #ffa726);
  border: none;
  border-radius: 50%;
  width: 48px;  /* Increased from 40px */
  height: 48px; /* Increased from 40px */
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.3s ease;
  font-size: 1.4rem; /* Increased from 1.2rem */
}

.mic-button:hover {
  transform: scale(1.1);
  box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);
}

.speak-word-btn {
  background: linear-gradient(45deg, #ffd700, #ffa726);
  border: none;
  border-radius: 50%;
  width: 48px;  /* Increased from 40px */
  height: 48px; /* Increased from 40px */
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.3s ease;
  font-size: 1.4rem; /* Increased from 1.2rem */
}

.speak-word-btn:hover {
  transform: scale(1.1);
  box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);
}

.speech-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 10px;
  margin: 10px 0;
}

.speech-status {
  font-size: 0.85rem;
  color: rgba(255, 255, 255, 0.8);
  margin: 3px 0;
}

.video-container {
  position: absolute;
  width: 300px;
  height: 300px;
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1; 
}

.video-container video {
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: 15px;
  opacity: 0;
  transition: opacity 0.3s ease-in-out;
  position: absolute;
}

@keyframes gentle-bounce {
  0%, 100% { transform: translateY(0); }
  50% { transform: translateY(-3px); }
}

.puppy-image:hover {
  transform: scale(1.05);
  transition: transform 0.3s ease;
}
</style>
</head>
<body>
<h1>Play with Leo! üêï‚ú®</h1>

<div class="stats-container">
  <div class="stats">
    <div class="stat">
      <span class="stat-icon">‚ù§Ô∏è</span>
      <span class="happiness-value">50%</span>
    </div>
    <div class="stat">
      <span class="stat-icon">‚≠ê</span>
      <span class="energy-value">100%</span>
    </div>
  </div>

  <div class="happiness-meter">
    <div class="happiness-fill"></div>
  </div>
</div>

<div class="puppy-container">
  <img src="/a/5384e0ad-842a-46e6-afa0-ae6492391379" alt="Adorable toy poodle puppy with golden-brown fur and expressive eyes" class="puppy-image">
  <div class="video-container">
    <video id="petVideo" src="/Standard_Mode_dog_licking_his_paw_.mp4" style="display: none"></video>
    <video id="playVideo" src="/Standard_Mode_dog_playing___jumping.mp4" style="display: none"></video>
    <video id="treatVideo" src="/Standard_Mode_dog_sitting___licking_his_paw_.mp4" style="display: none"></video>
  </div>
</div>

<div class="interaction-items">
  <div class="interaction-item" data-type="pet">
    <span>ü§ö</span> Pet Leo
  </div>
  <div class="interaction-item" data-type="play">
    <span>üéæ</span> Play Ball
  </div>
  <div class="interaction-item" data-type="treat">
    <span>ü¶¥</span> Give Treat
  </div>
</div>

<div class="reading-container">
  <h2 style="color: #ffd700; margin: 5px 0;">Spell with Leo! üìù</h2>
  <div class="word-display">Ready to start!</div>
  <div class="speech-container">
    <div class="button-group">
      <button class="mic-button" title="Click to speak">üé§</button>
      <button class="speak-word-btn" title="Hear spelling again">üîä</button>
    </div>
    <div class="speech-status">Listen to the spelling and guess the word</div>
  </div>
  <input type="text" class="reading-input" placeholder="Type the word after hearing it spelled..." autocomplete="off">
  <button class="next-word-btn">Next Word</button>
  <div class="reward-container">
    <p style="color: #ffd700; margin: 10px 0;">Great job! Choose your reward:</p>
  </div>
</div>

<script>
let happiness = 50;
let energy = 100;
const puppy = document.querySelector('.puppy-image');
const happinessFill = document.querySelector('.happiness-fill');
const happinessValue = document.querySelector('.happiness-value');
const energyValue = document.querySelector('.energy-value');
const interactionItems = document.querySelector('.interaction-items');

document.querySelectorAll('.interaction-item').forEach(item => {
  item.addEventListener('click', interactWithLeo);
});

function updateStats() {
  happiness = Math.min(100, Math.max(0, happiness));
  energy = Math.min(100, Math.max(0, energy));
  
  happinessFill.style.width = `${happiness}%`;
  happinessValue.textContent = `${Math.round(happiness)}%`;
  energyValue.textContent = `${Math.round(energy)}%`;
}

function createParticles(x, y, type) {
  const particles = {
    'pet': ['üíñ', '‚ú®', 'üí´'],
    'play': ['üéæ', '‚ö°', 'üåü'],
    'treat': ['ü¶¥', '‚ù§Ô∏è', 'üçñ']
  };
  
  const emojis = particles[type] || particles.pet;
  
  for (let i = 0; i < 6; i++) {
    const particle = document.createElement('div');
    particle.className = 'particle';
    particle.textContent = emojis[Math.floor(Math.random() * emojis.length)];
    particle.style.left = `${x + (Math.random() - 0.5) * 100}px`;
    particle.style.top = `${y + (Math.random() - 0.5) * 100}px`;
    document.body.appendChild(particle);
    setTimeout(() => particle.remove(), 1500);
  }
}

function interactWithLeo(e) {
  const rect = puppy.getBoundingClientRect();
  const type = e.currentTarget.dataset.type;
  
  createParticles(rect.left + rect.width/2, rect.top + rect.height/2, type);
  
  puppy.style.opacity = '0';
  
  document.querySelectorAll('.video-container video').forEach(v => {
    v.style.opacity = '0';
    v.style.display = 'none';
    v.pause();
    v.currentTime = 0;
  });
  
  let video;
  switch(type) {
    case 'pet':
      video = document.getElementById('petVideo');
      happiness += 5;
      energy += 2;
      break;
    case 'play':
      if (energy >= 10) {
        video = document.getElementById('playVideo');
        happiness += 15;
        energy -= 10;
      }
      break;
    case 'treat':
      video = document.getElementById('treatVideo');
      happiness += 10;
      energy += 15;
      break;
  }
  
  if (video) {
    video.style.display = 'block';
    requestAnimationFrame(() => {
      video.style.opacity = '1';
      video.play();
    });
    
    video.onended = function() {
      video.style.opacity = '0';
      setTimeout(() => {
        video.style.display = 'none';
        requestAnimationFrame(() => {
          puppy.style.opacity = '1';
        });
      }, 300);
    };
  } else {
    requestAnimationFrame(() => {
      puppy.style.opacity = '1';
    });
  }
  
  updateStats();
  interactionItems.style.display = 'none';
  readingInput.value = '';
  updateWord();
}

const words = ['puppy', 'play', 'happy', 'friend', 'love', 'bark', 'fetch', 'treat', 'walk', 'good'];
let currentWord = '';
const wordDisplay = document.querySelector('.word-display');
const readingInput = document.querySelector('.reading-input');
const nextWordBtn = document.querySelector('.next-word-btn');
const rewardContainer = document.querySelector('.reward-container');

function getRandomWord() {
  return words[Math.floor(Math.random() * words.length)];
}

function spellOutWord() {
  let currentIndex = 0;
  const letters = currentWord.split('');
  
  if (!wordDisplay.textContent.includes(letters.join(' '))) {
    wordDisplay.textContent = ''; 
  }
  
  const spellInterval = setInterval(() => {
    if (currentIndex < letters.length) {
      if (!wordDisplay.textContent.includes(letters.join(' '))) {
        wordDisplay.textContent += letters[currentIndex] + ' ';
      }
      speakWord(letters[currentIndex]); 
      currentIndex++;
    } else {
      clearInterval(spellInterval);
      readingInput.focus();
    }
  }, 1000); 
}

function updateWord() {
  currentWord = getRandomWord();
  readingInput.value = '';
  rewardContainer.style.display = 'none';
  interactionItems.style.display = 'none';
  
  wordDisplay.textContent = 'Get ready...';
  setTimeout(() => {
    speakWord("Here's your word:");
    setTimeout(spellOutWord, 1000);
  }, 1000);
}

function checkWord() {
  if (readingInput.value.toLowerCase().trim() === currentWord.toLowerCase()) {
    wordDisplay.textContent = 'üåü Correct! üåü';
    rewardContainer.style.display = 'block';
    interactionItems.style.display = 'flex'; 
    speakWord("Great job! Choose your reward!");
    
    document.querySelectorAll('.interaction-item').forEach(item => {
      if (!item.hasEventListener) {
        item.addEventListener('click', interactWithLeo);
        item.hasEventListener = true;
      }
    });
    
    createParticles(
      puppy.getBoundingClientRect().left + puppy.getBoundingClientRect().width/2,
      puppy.getBoundingClientRect().top + puppy.getBoundingClientRect().height/2,
      'pet'
    );
    
  } else if (readingInput.value.length >= currentWord.length) {
    wordDisplay.textContent = '‚ùå Try again!';
    rewardContainer.style.display = 'none';
    interactionItems.style.display = 'none';
    speakWord("Try again!");
  }
}

readingInput.addEventListener('input', () => {
  checkWord();
});

nextWordBtn.addEventListener('click', updateWord);

// Speech Recognition Setup
const micButton = document.querySelector('.mic-button');
const speechStatus = document.querySelector('.speech-status');
const speakWordBtn = document.querySelector('.speak-word-btn');

let recognition = null;
if ('webkitSpeechRecognition' in window) {
  recognition = new webkitSpeechRecognition();
  recognition.continuous = false;
  recognition.interimResults = false;
  recognition.lang = 'en-US';

  recognition.onstart = () => {
    micButton.classList.add('listening');
    speechStatus.textContent = 'Listening...';
  };

  recognition.onend = () => {
    micButton.classList.remove('listening');
    speechStatus.textContent = 'Listen to the spelling and guess the word';
  };

  recognition.onresult = (event) => {
    const transcript = event.results[0][0].transcript.toLowerCase().trim();
    readingInput.value = transcript;
    if (transcript === currentWord.toLowerCase()) {
      checkWord();
    } else {
      wordDisplay.textContent = '‚ùå Try again!';
      rewardContainer.style.display = 'none';
      interactionItems.style.display = 'none';
      speakWord("Try again!");
    }
  };

  recognition.onerror = (event) => {
    console.error('Speech recognition error:', event.error);
    speechStatus.textContent = 'Error occurred. Please try again.';
    micButton.classList.remove('listening');
  };
}

// Text-to-Speech Setup
const speechSynthesis = window.speechSynthesis;

function speakWord(word) {
  if (speechSynthesis) {
    speechSynthesis.cancel();
    
    const utterance = new SpeechSynthesisUtterance(word);
    utterance.rate = 0.8; 
    utterance.pitch = 1;
    speechSynthesis.speak(utterance);
  }
}

// Event Listeners for Speech Features
micButton.addEventListener('click', () => {
  if (recognition) {
    recognition.start();
  } else {
    alert('Speech recognition is not supported in your browser.');
  }
});

speakWordBtn.addEventListener('click', () => {
  speechSynthesis.cancel();
  spellOutWord();
});

// Initialize first word with speech
updateWord();
</script>
</body></html>